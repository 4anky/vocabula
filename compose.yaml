services:
  web-server:
    user: "${UID}:${GID}"
    build:
      context: .
    container_name: vocabula
    restart: always
    volumes:
      - ./:/app
    env_file:
      - .env
    depends_on:
      - db
    healthcheck:
      test: [ "CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/').read()" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  migrate:
    build:
      context: .
    container_name: migrate
    command: alembic upgrade head
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./:/app
    restart: "no"
    deploy:
      restart_policy:
        condition: none

  db:
    image: postgres:16
    container_name: postgres
    restart: always
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 2s

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web-server
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  pgdata:
